
package oopfinalproject;

import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.table.DefaultTableModel;
import oopfinalproject.Login.UserSession;



public class Dashboard extends javax.swing.JFrame {

    private int YES_NO_SELECTION;
    private int YES_SELECTION;
    

    public Dashboard() {
        initComponents();
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        comboBox1();
        comboBox2();
        // Initialize jTable3 (for contentcalendardb) 
jTable3.setModel(new DefaultTableModel(
    new Object[][]{}, // Initially empty
    new String[]{"Client Name", "File Link", "Username", "Month", "Remarks"} // Column names for contentcalendardb data
));
// Initialize jTable5 (for gbpdb) 
jTable5.setModel(new DefaultTableModel(
    new Object[][]{}, 
    new String[]{"Client Name", "File Link", "Username", "Month", "Remarks"} // Column names for gbpdb data
        
));

}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        roundedTextField1 = new oopfinalproject.RoundedTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane4 = new javax.swing.JScrollPane();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jToggleButton2 = new javax.swing.JToggleButton();
        jToggleButton3 = new javax.swing.JToggleButton();
        roundedTextField2 = new oopfinalproject.RoundedTextField();
        roundedTextField3 = new oopfinalproject.RoundedTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        roundedButton1 = new oopfinalproject.RoundedButton();
        roundedTextField4 = new oopfinalproject.RoundedTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        roundedTextField1.setText("roundedTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLayeredPane1.setBackground(new java.awt.Color(0, 0, 0));
        jLayeredPane1.setFont(new java.awt.Font("SF UI  Text G 8", 0, 12)); // NOI18N
        jLayeredPane1.setOpaque(true);
        jLayeredPane1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Axion RND", 0, 30)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(116, 252, 51));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ncompass");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 230, 70));

        jButton1.setBackground(new java.awt.Color(153, 153, 153));
        jButton1.setFont(new java.awt.Font("GothamSSm Medium", 0, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("DASHBOARD");
        jButton1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(116, 252, 51)));
        jButton1.setContentAreaFilled(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setMinimumSize(new java.awt.Dimension(9, 17));
        jButton1.setPreferredSize(new java.awt.Dimension(100, 30));
        jButton1.setSelected(true);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 209, -1, -1));

        jButton2.setBackground(new java.awt.Color(51, 51, 51));
        jButton2.setFont(new java.awt.Font("GothamSSm Medium", 0, 12)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("ACCOUNTS");
        jButton2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(116, 252, 51)));
        jButton2.setContentAreaFilled(false);
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.setPreferredSize(new java.awt.Dimension(100, 30));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 245, -1, -1));

        jButton3.setBackground(new java.awt.Color(51, 51, 51));
        jButton3.setFont(new java.awt.Font("GothamSSm Medium", 0, 12)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("QC");
        jButton3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(116, 252, 51)));
        jButton3.setContentAreaFilled(false);
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton3.setPreferredSize(new java.awt.Dimension(100, 30));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 281, -1, -1));

        jButton5.setBackground(new java.awt.Color(0, 0, 0));
        jButton5.setFont(new java.awt.Font("GothamSSm ExtraLight", 0, 12)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("LOG OUT");
        jButton5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(116, 252, 51)));
        jButton5.setContentAreaFilled(false);
        jButton5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton5.setPreferredSize(new java.awt.Dimension(100, 30));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 541, -1, -1));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oopfinalproject/ygf.png"))); // NOI18N
        jLabel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 230, 730));
        jPanel1.add(jScrollPane9, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 80, 110, 80));

        jScrollPane8.setViewportView(jTextPane2);

        jPanel1.add(jScrollPane8, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 60, 90, 50));

        jLayeredPane1.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 21, 230, 730));

        jTabbedPane1.setBackground(new java.awt.Color(102, 102, 102));
        jTabbedPane1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(116, 252, 51), 3, true));
        jTabbedPane1.setForeground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setFont(new java.awt.Font("SF UI  Text G 2", 0, 12)); // NOI18N
        jTabbedPane1.setOpaque(true);
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(710, 588));

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));

        jTable2.setBackground(new java.awt.Color(0, 0, 0));
        jTable2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTable2.setFont(new java.awt.Font("GothamSSm", 0, 12)); // NOI18N
        jTable2.setForeground(new java.awt.Color(255, 255, 255));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Client's Name", "File Link", "QC Checker", "Month", "Remarks"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable2.setColumnSelectionAllowed(true);
        jTable2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTable2.setRowHeight(30);
        jTable2.setSelectionBackground(new java.awt.Color(102, 102, 102));
        jTable2.setShowHorizontalLines(true);
        jTable2.setShowVerticalLines(true);
        jScrollPane5.setViewportView(jTable2);
        jTable2.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(4).setCellEditor(new DefaultCellEditor(new JComboBox()));
        }

        jButton6.setBackground(new java.awt.Color(102, 102, 102));
        jButton6.setFont(new java.awt.Font("SF UI  Text News G", 0, 12)); // NOI18N
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("DELETE");
        jButton6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(116, 252, 51), 2));
        jButton6.setContentAreaFilled(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(102, 102, 102));
        jButton7.setFont(new java.awt.Font("SF UI  Text News G", 0, 12)); // NOI18N
        jButton7.setForeground(new java.awt.Color(255, 255, 255));
        jButton7.setText("SAVE");
        jButton7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(116, 252, 51), 2));
        jButton7.setContentAreaFilled(false);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jTable4.setBackground(new java.awt.Color(0, 0, 0));
        jTable4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTable4.setFont(new java.awt.Font("GothamSSm", 0, 12)); // NOI18N
        jTable4.setForeground(new java.awt.Color(255, 255, 255));
        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Client's Name", "File Link", "QC Checker", "Month", "Remarks"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable4.setGridColor(new java.awt.Color(255, 255, 255));
        jTable4.setRowHeight(30);
        jTable4.setSelectionBackground(new java.awt.Color(153, 153, 153));
        jTable4.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jScrollPane6.setViewportView(jTable4);

        jLabel8.setFont(new java.awt.Font("GothamSSm", 1, 36)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(116, 252, 51));
        jLabel8.setText("GOOGLE BUSINESS PROFILE");

        jLabel9.setFont(new java.awt.Font("GothamSSm", 1, 36)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(116, 252, 51));
        jLabel9.setText("CONTENT CALENDAR");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1254, Short.MAX_VALUE)
            .addComponent(jScrollPane6)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("DASHBOARD", jPanel2);

        jPanel5.setBackground(new java.awt.Color(0, 0, 0));

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Client's Name", "File Link", "QC Checker", "Month", "Remarks"
            }
        ));
        jScrollPane2.setViewportView(jTable3);

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Clients's Name", "File Link", "QC Checker", "Month", "Remarks"
            }
        ));
        jScrollPane7.setViewportView(jTable5);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 1251, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(728, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(61, 61, 61))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("ACCOUNTS", jPanel5);

        jPanel4.setBackground(new java.awt.Color(0, 0, 0));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jToggleButton2.setBackground(new java.awt.Color(102, 102, 102));
        jToggleButton2.setFont(new java.awt.Font("GothamSSm ExtraLight", 0, 14)); // NOI18N
        jToggleButton2.setForeground(new java.awt.Color(255, 255, 255));
        jToggleButton2.setText("CC");
        jToggleButton2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(116, 252, 51)));
        jToggleButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jToggleButton2.setOpaque(true);
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });
        jPanel4.add(jToggleButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 360, 425, 50));

        jToggleButton3.setBackground(new java.awt.Color(102, 102, 102));
        jToggleButton3.setFont(new java.awt.Font("GothamSSm ExtraLight", 0, 14)); // NOI18N
        jToggleButton3.setForeground(new java.awt.Color(255, 255, 255));
        jToggleButton3.setText("GBP");
        jToggleButton3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(116, 252, 51)));
        jToggleButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jToggleButton3.setOpaque(true);
        jToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton3ActionPerformed(evt);
            }
        });
        jPanel4.add(jToggleButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 360, 425, 50));

        roundedTextField2.setBackground(new java.awt.Color(102, 102, 102));
        roundedTextField2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(116, 252, 51)));
        roundedTextField2.setForeground(new java.awt.Color(255, 255, 255));
        roundedTextField2.setText("   Client's Name");
        roundedTextField2.setBackgroundColor(new java.awt.Color(102, 102, 102));
        roundedTextField2.setBorderColor(new java.awt.Color(116, 252, 51));
        roundedTextField2.setFont(new java.awt.Font("GothamSSm ExtraLight", 0, 14)); // NOI18N
        roundedTextField2.setRadius(20);
        roundedTextField2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                roundedTextField2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                roundedTextField2FocusLost(evt);
            }
        });
        roundedTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roundedTextField2ActionPerformed(evt);
            }
        });
        jPanel4.add(roundedTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 220, 870, 50));

        roundedTextField3.setBackground(new java.awt.Color(102, 102, 102));
        roundedTextField3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(116, 252, 51)));
        roundedTextField3.setForeground(new java.awt.Color(255, 255, 255));
        roundedTextField3.setText("   File Link");
        roundedTextField3.setBackgroundColor(new java.awt.Color(102, 102, 102));
        roundedTextField3.setBorderColor(new java.awt.Color(116, 252, 51));
        roundedTextField3.setFont(new java.awt.Font("GothamSSm ExtraLight", 0, 14)); // NOI18N
        roundedTextField3.setRadius(20);
        roundedTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roundedTextField3ActionPerformed(evt);
            }
        });
        jPanel4.add(roundedTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 430, 870, 50));

        jComboBox1.setBackground(new java.awt.Color(102, 102, 102));
        jComboBox1.setFont(new java.awt.Font("SF UI  Text Light", 0, 14)); // NOI18N
        jComboBox1.setForeground(new java.awt.Color(255, 255, 255));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Month", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        jComboBox1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(116, 252, 51)));
        jComboBox1.setOpaque(true);
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jPanel4.add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 500, 870, 50));

        roundedButton1.setBackground(new java.awt.Color(102, 102, 102));
        roundedButton1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(116, 252, 51)));
        roundedButton1.setForeground(new java.awt.Color(255, 255, 255));
        roundedButton1.setText("Submit");
        roundedButton1.setBackgroundColor(new java.awt.Color(102, 102, 102));
        roundedButton1.setBorderColor(new java.awt.Color(116, 252, 51));
        roundedButton1.setFont(new java.awt.Font("GothamSSm Medium", 0, 14)); // NOI18N
        roundedButton1.setHoverColor(new java.awt.Color(116, 252, 51));
        roundedButton1.setRadius(25);
        roundedButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roundedButton1ActionPerformed(evt);
            }
        });
        jPanel4.add(roundedButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 580, 150, 50));

        roundedTextField4.setBackground(new java.awt.Color(102, 102, 102));
        roundedTextField4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(116, 252, 51)));
        roundedTextField4.setForeground(new java.awt.Color(255, 255, 255));
        roundedTextField4.setText("   Member Assigned");
        roundedTextField4.setBackgroundColor(new java.awt.Color(102, 102, 102));
        roundedTextField4.setBorderColor(new java.awt.Color(116, 252, 51));
        roundedTextField4.setFont(new java.awt.Font("GothamSSm ExtraLight", 0, 14)); // NOI18N
        roundedTextField4.setRadius(20);
        roundedTextField4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                roundedTextField4FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                roundedTextField4FocusLost(evt);
            }
        });
        roundedTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roundedTextField4ActionPerformed(evt);
            }
        });
        jPanel4.add(roundedTextField4, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 290, 870, 50));

        jLabel3.setFont(new java.awt.Font("GothamSSm Black", 0, 48)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("SUBMIT FOR CHECKING");
        jPanel4.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 150, -1, -1));

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oopfinalproject/BG1.png"))); // NOI18N
        jPanel4.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -20, 1260, 820));

        jTabbedPane1.addTab("QC", jPanel4);

        jLayeredPane1.add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, -40, 1260, 830));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oopfinalproject/Texturelabs_Fabric_178L.jpg"))); // NOI18N
        jLabel6.setText("jLabel6");
        jLayeredPane1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -4, 1550, 790));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(0);  
         String queryContentCalendar = "SELECT * FROM contentcalendardb";
         String queryGbp = "SELECT * FROM gbpdb";
         
try (Connection connection = MyConnection.getConnection();
     Statement statement = connection.createStatement();
     ResultSet resultSetContentCalendar = statement.executeQuery(queryContentCalendar)) {

    // Get table models
    DefaultTableModel tblModelContentCalendar = (DefaultTableModel) jTable2.getModel();
    DefaultTableModel tblModelGbp = (DefaultTableModel) jTable4.getModel();

    // Clear the tables to avoid duplicates
    tblModelContentCalendar.setRowCount(0);
    tblModelGbp.setRowCount(0);

    // Fetch data from contentcalendardb and add to jTable2
    while (resultSetContentCalendar.next()) {
        String clientName = resultSetContentCalendar.getString("client_name");
        String fileLink = resultSetContentCalendar.getString("file_link");
        String username = resultSetContentCalendar.getString("username");
        String month = resultSetContentCalendar.getString("month");
        String remarks = resultSetContentCalendar.getString("remarks");

        String tbData[] = { clientName, fileLink, username, month, remarks };
        tblModelContentCalendar.addRow(tbData); 
    }

    // Fetch data from gbpdb and add to jTable4
    try (ResultSet resultSetGbp = statement.executeQuery(queryGbp)) {
        while (resultSetGbp.next()) {
            String clientName = resultSetGbp.getString("client_name");
            String fileLink = resultSetGbp.getString("file_link");
            String username = resultSetGbp.getString("username");
            String month = resultSetGbp.getString("month");
            String remarks = resultSetGbp.getString("remarks");

            String tbData[] = { clientName, fileLink, username, month, remarks };
            tblModelGbp.addRow(tbData);
        }
    }

} catch (SQLException ex) {
    JOptionPane.showMessageDialog(null, "Error fetching data: " + ex.getMessage());
}     
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(2);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(1);
// Fetch the logged-in username
String loggedInUsername = UserSession.getLoggedInUsername();


// Step 1: Check if the Username exists in the 'register' table
String checkUsernameQuery = "SELECT Username FROM resgister WHERE Username = ?";

try (Connection connection = MyConnection.getConnection();
     PreparedStatement ps = connection.prepareStatement(checkUsernameQuery)) {

    // Set the parameter for the query
    ps.setString(1, loggedInUsername);

    // Execute the query
    ResultSet resultSet = ps.executeQuery();

    // Step 2: If the Username exists in the register table, fetch data from contentcalendardb
    if (resultSet.next()) {
        // Username found in the register table, proceed to fetch data from contentcalendardb
        String fetchContentQuery = "SELECT * FROM contentcalendardb WHERE Username = ?";

        try (PreparedStatement contentPs = connection.prepareStatement(fetchContentQuery)) {
            // Set the parameter for the contentcalendardb query
            contentPs.setString(1, loggedInUsername);

            // Execute the query to fetch data from contentcalendardb
            ResultSet contentResultSet = contentPs.executeQuery();

            // Get the table model for jTable3 (contentcalendardb)
            DefaultTableModel tblModel = (DefaultTableModel) jTable3.getModel();

            // Clear the table to avoid duplicates
            tblModel.setRowCount(0);

            // Fetch data from the ResultSet and add it to the table
            while (contentResultSet.next()) {
                String client_name = contentResultSet.getString("client_name");
                String file_link = contentResultSet.getString("file_link");
                String username = contentResultSet.getString("Username");
                String month = contentResultSet.getString("month");
                String remarks = contentResultSet.getString("Remarks");

                // Add the row to the table model
                String tbData[] = {client_name, file_link, username, month, remarks};
                tblModel.addRow(tbData);
            }


        }

        // Now fetch data from gbpdb table and display in jTable5
        String fetchGbpQuery = "SELECT * FROM gbpdb WHERE Username = ?";

        try (PreparedStatement gbpPs = connection.prepareStatement(fetchGbpQuery)) {
            // Set the parameter for the gbpdb query
            gbpPs.setString(1, loggedInUsername);

            // Execute the query to fetch data from gbpdb
            ResultSet gbpResultSet = gbpPs.executeQuery();

            // Get the table model for jTable5 (gbpdb)
            DefaultTableModel tblModel5 = (DefaultTableModel) jTable5.getModel();

            // Clear the table to avoid duplicates
            tblModel5.setRowCount(0);

            // Fetch data from the ResultSet and add it to the table
            while (gbpResultSet.next()) {
                String client_name = gbpResultSet.getString("client_name");
                String file_link = gbpResultSet.getString("file_link");
                String username = gbpResultSet.getString("Username");
                String month = gbpResultSet.getString("month");
                String remarks = gbpResultSet.getString("Remarks");

                // Add the row to the table model
                String tbData[] = {client_name, file_link, username, month, remarks};
                tblModel5.addRow(tbData);
            }

            // Show success message
            JOptionPane.showMessageDialog(null, "Data for '" + loggedInUsername + "' fetched successfully!");
        }

    } else {
        // Username not found in the register table
        JOptionPane.showMessageDialog(null, "User do not exist.");
    }
} catch (SQLException ex) {
    // Handle any SQL exceptions
    Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
    JOptionPane.showMessageDialog(null, "Error fetching data: " + ex.getMessage());
}
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
        // TODO add your handling code here:
        if (jToggleButton2.isSelected()) {
                    roundedButton1ActionPerformed();
                } else {
                    JOptionPane.showMessageDialog(null, "Please toggle 'Content Calendar' to submit.");
                }
        
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void roundedButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roundedButton1ActionPerformed
// TODO add your handling code here:
String clientName = roundedTextField2.getText();
String fileLink = roundedTextField3.getText();
String memAssigned= roundedTextField4.getText();
String month = (String) jComboBox1.getSelectedItem();


// Check which toggle button is selected
boolean isContentCalendarSelected = jToggleButton2.isSelected();
boolean isGBPSelected = jToggleButton3.isSelected();

// Validate fields
if (clientName.isEmpty() || fileLink.isEmpty() || month.isEmpty()) {
    JOptionPane.showMessageDialog(null, "All fields are required!");
    return;
}

// Check if a valid toggle button is selected
if (!isContentCalendarSelected && !isGBPSelected) {
    JOptionPane.showMessageDialog(null, "Please select either Content Calendar or GBP.");
    return;
}

// Determine the target table based on the toggle button
String targetTable = isContentCalendarSelected ? "ContentCalendarDB" : "GBPDB";

// Database connection and insertion
try (Connection connection = MyConnection.getConnection()) {
    String sql = "INSERT INTO " + targetTable + " (client_name, file_link,Username, month) VALUES (?, ?, ?, ?)";
    PreparedStatement preparedStatement = connection.prepareStatement(sql);
    preparedStatement.setString(1, clientName);
    preparedStatement.setString(2, fileLink);
    preparedStatement.setString(3, memAssigned);
    preparedStatement.setString(4, month);
    
    
    

    int rowsInserted = preparedStatement.executeUpdate();
    if (rowsInserted > 0) {
        JOptionPane.showMessageDialog(null, "Data uploaded successfully to " + targetTable + "!");
    }
} catch (SQLException e) {
    JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage());
}

        
    }//GEN-LAST:event_roundedButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        int a = JOptionPane.showConfirmDialog(null, "Do you really want to exit?", "Select", YES_NO_SELECTION);
        if(a == YES_SELECTION){
            this.dispose();
            Login RegiserPanel1 = new Login();
            RegiserPanel1.setVisible(true);
        }
        else{
            this.dispose();
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void roundedTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roundedTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roundedTextField4ActionPerformed

    private void roundedTextField2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_roundedTextField2FocusGained
        // TODO add your handling code here:
        
        if(roundedTextField2.getText().equals("Client's Name"))
        {
            roundedTextField2.setText("");
            roundedTextField2.setForeground(new Color(153,153,153));
        }
    }//GEN-LAST:event_roundedTextField2FocusGained

    private void roundedTextField2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_roundedTextField2FocusLost
        // TODO add your handling code here:
        
          if(roundedTextField2.getText().equals(""))
        {
            roundedTextField2.setText("Client's Name");
            roundedTextField2.setForeground(new Color(153,153,153));
        }
    }//GEN-LAST:event_roundedTextField2FocusLost

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
// Get the database connection
// Get the database connection
try (Connection con = MyConnection.getConnection()) {

    // Get the selected row index in jTable2 (contentcalendardb) and jTable4 (gbpdb)
    DefaultTableModel model2 = (DefaultTableModel) jTable2.getModel(); // Model for jTable2 (contentcalendardb)
    DefaultTableModel model4 = (DefaultTableModel) jTable4.getModel(); // Model for jTable4 (gbpdb)
    
    int selectedRow2 = jTable2.getSelectedRow(); // Selected row from contentcalendardb (jTable2)
    int selectedRow4 = jTable4.getSelectedRow(); // Selected row from gbpdb (jTable4)

    // If no row is selected in both tables, show a message and return
    if (selectedRow2 == -1 && selectedRow4 == -1) {
        JOptionPane.showMessageDialog(null, "Please select a row to delete from either table.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // If a row is selected in jTable2 (contentcalendardb)
    if (selectedRow2 != -1) {
        // Get the values from the selected row in jTable2 (contentcalendardb)
        String clientName = model2.getValueAt(selectedRow2, 0).toString();
        String fileLink = model2.getValueAt(selectedRow2, 1).toString();

        // SQL query to delete the row from contentcalendardb
        String sqlContentCalendar = "DELETE FROM contentcalendardb WHERE client_name = ? AND file_link = ?";

        // SQL query to delete the row from gbpdb
        String sqlGbp = "DELETE FROM gbpdb WHERE client_name = ? AND file_link = ?";

        try (PreparedStatement stmtContentCalendar = con.prepareStatement(sqlContentCalendar);
             PreparedStatement stmtGbp = con.prepareStatement(sqlGbp)) {

            // Set the client_name and file_link for both deletions
            stmtContentCalendar.setString(1, clientName);
            stmtContentCalendar.setString(2, fileLink);

            stmtGbp.setString(1, clientName);
            stmtGbp.setString(2, fileLink);

            // Execute the deletions for both tables
            int rowsDeletedContentCalendar = stmtContentCalendar.executeUpdate();
            int rowsDeletedGbp = stmtGbp.executeUpdate();

            // Check if rows were deleted from both tables
            if (rowsDeletedContentCalendar > 0 && rowsDeletedGbp > 0) {
                // Remove the selected row from jTable2 (contentcalendardb)
                model2.removeRow(selectedRow2);

                // Also remove the corresponding row from jTable4 (gbpdb)
                int rowForGbp = findRowByClientAndFile(model4, clientName, fileLink);
                if (rowForGbp != -1) {
                    model4.removeRow(rowForGbp); // Remove the row from jTable4 (gbpdb)
                }

                // Show success message
                JOptionPane.showMessageDialog(null, "Row deleted from both contentcalendardb and gbpdb successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                // If no rows were deleted from either of the tables
                JOptionPane.showMessageDialog(null, "Error deleting the row from the databases.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // If a row is selected in jTable4 (gbpdb), delete only from gbpdb
    if (selectedRow4 != -1) {
        // Get the values from the selected row in jTable4 (gbpdb)
        String clientName = model4.getValueAt(selectedRow4, 0).toString();
        String fileLink = model4.getValueAt(selectedRow4, 1).toString();

        // SQL query to delete the row from gbpdb
        String sqlGbp = "DELETE FROM gbpdb WHERE client_name = ? AND file_link = ?";

        try (PreparedStatement stmtGbp = con.prepareStatement(sqlGbp)) {
            // Set the client_name and file_link for deletion from gbpdb
            stmtGbp.setString(1, clientName);
            stmtGbp.setString(2, fileLink);

            // Execute the deletion for gbpdb
            int rowsDeletedGbp = stmtGbp.executeUpdate();

            // Check if the row was deleted from gbpdb
            if (rowsDeletedGbp > 0) {
                // Remove the selected row from jTable4 (gbpdb)
                model4.removeRow(selectedRow4);

                // Show success message
                JOptionPane.showMessageDialog(null, "Row deleted from gbpdb successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                // If no rows were deleted from gbpdb
                JOptionPane.showMessageDialog(null, "Error deleting the row from gbpdb.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

} catch (Exception e) {
    JOptionPane.showMessageDialog(null, "Database connection error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
}

// Helper method to find the row index in jTable4 (gbpdb) by client_name and file_link




    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:                            
        saveChanges();       
    }//GEN-LAST:event_jButton7ActionPerformed

    private void roundedTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roundedTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roundedTextField2ActionPerformed

    private void roundedTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roundedTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roundedTextField3ActionPerformed

    private void jToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton3ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jToggleButton3ActionPerformed

    private void roundedTextField4FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_roundedTextField4FocusGained
        // TODO add your handling code here:        
          if(String.valueOf(roundedTextField4.getText()).equals("Member Assigned"))
        {
            roundedTextField4.setText("");
            roundedTextField4.setForeground(new Color(153,153,153));           
        }
    }//GEN-LAST:event_roundedTextField4FocusGained

    private void roundedTextField4FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_roundedTextField4FocusLost
        // TODO add your handling code here:
           if(roundedTextField4.getText().equals(""))
        {
            roundedTextField4.setText("Member Assigned");
            roundedTextField4.setForeground(new Color(153,153,153));
        }
    }//GEN-LAST:event_roundedTextField4FocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Dashboard().setVisible(true);
        });
        
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    private oopfinalproject.RoundedButton roundedButton1;
    private oopfinalproject.RoundedTextField roundedTextField1;
    private oopfinalproject.RoundedTextField roundedTextField2;
    private oopfinalproject.RoundedTextField roundedTextField3;
    private oopfinalproject.RoundedTextField roundedTextField4;
    // End of variables declaration//GEN-END:variables

    private void roundedButton1ActionPerformed() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void comboBox1 (){      
if (jTable2.getColumnModel().getColumnCount() > 0) {
    JComboBox<String> comboBox = new JComboBox<>();
    comboBox.addItem("Approved");
    comboBox.addItem("For Revision");

  
    // Set the combo box as the editor for the specific column
    jTable2.getColumnModel().getColumn(4).setCellEditor(new DefaultCellEditor(comboBox));

}
        }
    
    private void comboBox2 (){        
if (jTable4.getColumnModel().getColumnCount() > 0) {
    JComboBox<String> comboBox = new JComboBox<>();
    comboBox.addItem("Approved");
    comboBox.addItem("For Revision");
   
    // Set the combo box as the editor for the specific column
    jTable4.getColumnModel().getColumn(4).setCellEditor(new DefaultCellEditor(comboBox));

}
        }
    
private void saveContentCalendarRemarks() {
    DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
    int rowCount = model.getRowCount();

    try (Connection connection = MyConnection.getConnection()) {
        // Prepare the SQL statement for updating the database
        String sql = "UPDATE contentcalendardb SET Remarks = ? WHERE client_name = ? AND file_link = ?";
        
        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            // Loop over each row and update the remarks individually
            for (int i = 0; i < rowCount; i++) {
                // Get the values from the JTable
                String clientName = (String) model.getValueAt(i, 0);  
                String fileLink = (String) model.getValueAt(i, 1);    
                String Remarks = (String) model.getValueAt(i, 4);     

                // Debugging: print the values of the current row being updated
                System.out.println("Row " + i + ": Client = " + clientName + ", File = " + fileLink + ", Remarks = " + Remarks);

                // Only update if the remarks have changed (checking for null or empty is important)
                if (Remarks != null) {
                    // Debugging log: confirming what is being set
                    System.out.println("Updating for Client: " + clientName + ", FileLink: " + fileLink + " with Remarks: " + Remarks);

                    // Set the parameters for the prepared statement for this row
                    preparedStatement.setString(1, Remarks);
                    preparedStatement.setString(2, clientName);
                    preparedStatement.setString(3, fileLink);

                    // Execute the update for this specific row
                    int updatedRows = preparedStatement.executeUpdate();
                    if (updatedRows == 0) {
                        System.out.println("No rows updated for: Client = " + clientName + ", File = " + fileLink);
                    } else {
                        System.out.println("Successfully updated: Client = " + clientName + ", File = " + fileLink);
                    }
                }
            }

            JOptionPane.showMessageDialog(null, "Changes saved to contentcalendardb successfully!");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error saving changes to contentcalendardb: " + e.getMessage());
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error establishing connection: " + e.getMessage());
    }
}

    private void saveGbpRemarks() {
    DefaultTableModel model = (DefaultTableModel) jTable4.getModel();
    int rowCount = model.getRowCount();

    try (Connection connection = MyConnection.getConnection()) {
        // Prepare the SQL statement for updating the database
        String sql = "UPDATE gbpdb SET Remarks = ? WHERE client_name = ? AND file_link = ?";
        PreparedStatement preparedStatement = connection.prepareStatement(sql);

        for (int i = 0; i < rowCount; i++) {
            // Get the values from the JTable
            String clientName = (String) model.getValueAt(i, 0);  
            String fileLink = (String) model.getValueAt(i, 1);   
            String remarks = (String) model.getValueAt(i, 4);    

            // Debugging logs
            System.out.println("Updating gbpdb: Client = " + clientName + ", File = " + fileLink + ", Remarks = " + remarks);

            // Check and log remarks
            if ("Approved".equalsIgnoreCase(remarks)) {
                System.out.println("Marked as Approved for client: " + clientName);
            } else if ("For Revision".equalsIgnoreCase(remarks)) {
                System.out.println("Marked for Revision for client: " + clientName);
            }

            // Set the parameters for the prepared statement
            preparedStatement.setString(1, remarks);
            preparedStatement.setString(2, clientName);
            preparedStatement.setString(3, fileLink);

            // Execute the update
            preparedStatement.executeUpdate();
        }

        JOptionPane.showMessageDialog(null, "Changes saved to gbpdb successfully!");
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error saving changes to gbpdb: " + e.getMessage());
    }
}
    
    private void saveChanges() {
    saveContentCalendarRemarks();
    saveGbpRemarks();
    }
    
    private int findRowByClientAndFile(DefaultTableModel model, String clientName, String fileLink) {
    for (int row = 0; row < model.getRowCount(); row++) {
        String tableClientName = model.getValueAt(row, 0).toString();
        String tableFileLink = model.getValueAt(row, 1).toString();
        if (tableClientName.equals(clientName) && tableFileLink.equals(fileLink)) {
            return row;
        }
    }
    return -1; // Return -1 if no matching row is found
}
  
}




  
    

    
